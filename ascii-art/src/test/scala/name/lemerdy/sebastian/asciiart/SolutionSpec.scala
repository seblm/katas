package name.lemerdy.sebastian.asciiart

import java.io._

import org.scalatest.{FlatSpec, Matchers}

import scala.Console.{withIn, withOut}

class SolutionSpec extends FlatSpec with Matchers {

  "Solution" should "Test une seul lettre : E" in {
    val in: InputStream = new ByteArrayInputStream(("" +
      "4\n" +
      "5\n" +
      "E\n" +
      """ #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### """ + "\n" +
      """# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # """ + "\n" +
      """### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## """ + "\n" +
      """# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       """ + "\n" +
      """# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  """).getBytes)
    val out: OutputStream = new ByteArrayOutputStream()

    withIn(in) {
      withOut(out) {
        Solution.main(Array.empty[String])
      }
    }

    out.toString should be("" +
      "### \n" +
      "#   \n" +
      "##  \n" +
      "#   \n" +
      "### \n")
  }

  it should "Test MANHATTAN" in {
    val in: InputStream = new ByteArrayInputStream(("" +
      "4\n" +
      "5\n" +
      "MANHATTAN\n" +
      """ #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### """ + "\n" +
      """# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # """ + "\n" +
      """### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## """ + "\n" +
      """# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       """ + "\n" +
      """# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  """).getBytes)
    val out: OutputStream = new ByteArrayOutputStream()

    withIn(in) {
      withOut(out) {
        Solution.main(Array.empty[String])
      }
    }

    out.toString should be("" +
      "# #  #  ### # #  #  ### ###  #  ### \n" +
      "### # # # # # # # #  #   #  # # # # \n" +
      "### ### # # ### ###  #   #  ### # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n")
  }

  it should "Test ManhAtTan" in {
    val in: InputStream = new ByteArrayInputStream(("" +
      "4\n" +
      "5\n" +
      "ManhAtTan\n" +
      """ #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### """ + "\n" +
      """# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # """ + "\n" +
      """### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## """ + "\n" +
      """# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       """ + "\n" +
      """# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  """).getBytes)
    val out: OutputStream = new ByteArrayOutputStream()

    withIn(in) {
      withOut(out) {
        Solution.main(Array.empty[String])
      }
    }

    out.toString should be("" +
      "# #  #  ### # #  #  ### ###  #  ### \n" +
      "### # # # # # # # #  #   #  # # # # \n" +
      "### ### # # ### ###  #   #  ### # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n" +
      "# # # # # # # # # #  #   #  # # # # \n")
  }

  it should "Test M@NH@TT@N" in {
    val in: InputStream = new ByteArrayInputStream(("" +
      "4\n" +
      "5\n" +
      "M@NH@TT@N\n" +
      """ #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### """ + "\n" +
      """# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # """ + "\n" +
      """### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## """ + "\n" +
      """# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       """ + "\n" +
      """# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  """).getBytes)
    val out: OutputStream = new ByteArrayOutputStream()

    withIn(in) {
      withOut(out) {
        Solution.main(Array.empty[String])
      }
    }

    out.toString should be("" +
      "# # ### ### # # ### ### ### ### ### \n" +
      "###   # # # # #   #  #   #    # # # \n" +
      "###  ## # # ###  ##  #   #   ## # # \n" +
      "# #     # # # #      #   #      # # \n" +
      "# #  #  # # # #  #   #   #   #  # # \n")
  }

  it should "MANHATTAN avec une autre reprÃ©sentation ASCII" in {
    val in: InputStream = new ByteArrayInputStream(("" +
      "20\n" +
      "11\n" +
      "MANHATTAN\n" +
n" +
      """| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |""" + "\n" +
      """| |      __      | || |   ______     | || |     ______   | || |  ________    | || |  _________   | || |  _________   | || |    ______    | || |  ____  ____  | || |     _____    | || |     _____    | || |  ___  ____   | || |   _____      | || | ____    ____ | || | ____  _____  | || |     ____     | || |   ______     | || |    ___       | || |  _______     | || |    _______   | || |  _________   | || | _____  _____ | || | ____   ____  | || | _____  _____ | || |  ____  ____  | || |  ____  ____  | || |   ________   | || |    ______    | |""" + "\n" +
      """| |     /  \     | || |  |_   _ \    | || |   .' ___  |  | || | |_   ___ `.  | || | |_   ___  |  | || | |_   ___  |  | || |  .' ___  |   | || | |_   ||   _| | || |    |_   _|   | || |    |_   _|   | || | |_  ||_  _|  | || |  |_   _|     | || ||_   \  /   _|| || ||_   \|_   _| | || |   .'    `.   | || |  |_   __ \   | || |  .'   '.     | || | |_   __ \    | || |   /  ___  |  | || | |  _   _  |  | || ||_   _||_   _|| || ||_  _| |_  _| | || ||_   _||_   _|| || | |_  _||_  _| | || | |_  _||_  _| | || |  |  __   _|  | || |   / _ __ `.  | |""" + "\n" +
      """| |    / /\ \    | || |    | |_) |   | || |  / .'   \_|  | || |   | |   `. \ | || |   | |_  \_|  | || |   | |_  \_|  | || | / .'   \_|   | || |   | |__| |   | || |      | |     | || |      | |     | || |   | |_/ /    | || |    | |       | || |  |   \/   |  | || |  |   \ | |   | || |  /  .--.  \  | || |    | |__) |  | || | /  .-.  \    | || |   | |__) |   | || |  |  (__ \_|  | || | |_/ | | \_|  | || |  | |    | |  | || |  \ \   / /   | || |  | | /\ | |  | || |   \ \  / /   | || |   \ \  / /   | || |  |_/  / /    | || |  |_/____) |  | |""" + "\n" +
      """| |   / ____ \   | || |    |  __'.   | || |  | |         | || |   | |    | | | || |   |  _|  _   | || |   |  _|      | || | | |    ____  | || |   |  __  |   | || |      | |     | || |   _  | |     | || |   |  __'.    | || |    | |   _   | || |  | |\  /| |  | || |  | |\ \| |   | || |  | |    | |  | || |    |  ___/   | || | | |   | |    | || |   |  __ /    | || |   '.___`-.   | || |     | |      | || |  | '    ' |  | || |   \ \ / /    | || |  | |/  \| |  | || |    > `' <    | || |    \ \/ /    | || |     .'.' _   | || |    /  ___.'  | |""" + "\n" +
      """| | _/ /    \ \_ | || |   _| |__) |  | || |  \ `.___.'\  | || |  _| |___.' / | || |  _| |___/ |  | || |  _| |_       | || | \ `.___]  _| | || |  _| |  | |_  | || |     _| |_    | || |  | |_' |     | || |  _| |  \ \_  | || |   _| |__/ |  | || | _| |_\/_| |_ | || | _| |_\   |_  | || |  \  `--'  /  | || |   _| |_      | || | \  `-'  \_   | || |  _| |  \ \_  | || |  |`\____) |  | || |    _| |_     | || |   \ `--' /   | || |    \ ' /     | || |  |   /\   |  | || |  _/ /'`\ \_  | || |    _|  |_    | || |   _/ /__/ |  | || |    |_|       | |""" + "\n" +
      """| ||____|  |____|| || |  |_______/   | || |   `._____.'  | || | |________.'  | || | |_________|  | || | |_____|      | || |  `._____.'   | || | |____||____| | || |    |_____|   | || |  `.___.'     | || | |____||____| | || |  |________|  | || ||_____||_____|| || ||_____|\____| | || |   `.____.'   | || |  |_____|     | || |  `.___.\__|  | || | |____| |___| | || |  |_______.'  | || |   |_____|    | || |    `.__.'    | || |     \_/      | || |  |__/  \__|  | || | |____||____| | || |   |______|   | || |  |________|  | || |    (_)       | |""" + "\n" +
      """| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |""" + "\n" +
      """| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |""" + "\n" +
n" +
      "").getBytes)
    val out: OutputStream = new ByteArrayOutputStream()

    withIn(in) {
      withOut(out) {
        Solution.main(Array.empty[String])
      }
    }

    out.toString should be("" +
      """ .----------------.  .----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.""" + "\n" +
      """| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |""" + "\n" +
      """| | ____    ____ | || |      __      | || | ____  _____  | || |  ____  ____  | || |      __      | || |  _________   | || |  _________   | || |      __      | || | ____  _____  | |""" + "\n" +
      """| ||_   \  /   _|| || |     /  \     | || ||_   \|_   _| | || | |_   ||   _| | || |     /  \     | || | |  _   _  |  | || | |  _   _  |  | || |     /  \     | || ||_   \|_   _| | |""" + "\n" +
      """| |  |   \/   |  | || |    / /\ \    | || |  |   \ | |   | || |   | |__| |   | || |    / /\ \    | || | |_/ | | \_|  | || | |_/ | | \_|  | || |    / /\ \    | || |  |   \ | |   | |""" + "\n" +
      """| |  | |\  /| |  | || |   / ____ \   | || |  | |\ \| |   | || |   |  __  |   | || |   / ____ \   | || |     | |      | || |     | |      | || |   / ____ \   | || |  | |\ \| |   | |""" + "\n" +
      """| | _| |_\/_| |_ | || | _/ /    \ \_ | || | _| |_\   |_  | || |  _| |  | |_  | || | _/ /    \ \_ | || |    _| |_     | || |    _| |_     | || | _/ /    \ \_ | || | _| |_\   |_  | |""" + "\n" +
      """| ||_____||_____|| || ||____|  |____|| || ||_____|\____| | || | |____||____| | || ||____|  |____|| || |   |_____|    | || |   |_____|    | || ||____|  |____|| || ||_____|\____| | |""" + "\n" +
      """| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |""" + "\n" +
      """| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |""" + "\n" +
      """ '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' """ + "\n")
  }

}
